import * as fs from 'fs';
import { parse, isInteger } from 'lossless-json';
import * as path from 'path';

function bigIntReplacer(key: string, value: any): any {
  if (typeof value === 'bigint') {
    return value.toString();
  }
  return value;
}

// parse integer values into a bigint, and use a regular number otherwise
function customNumberParser(value: string) {
  return isInteger(value) ? BigInt(value) : parseFloat(value);
}

function convertJsonToTypeScript(
  jsonFilePath: [string, string],
  outputFilePath: string,
  variableName: string = 'data',
) {
  const jsonData = fs.readFileSync(jsonFilePath[0], 'utf8');
  const remappings = fs.readFileSync(jsonFilePath[1], 'utf8');
  // remap all chain names to ids.
  const parsedJson = parse(jsonData, null, customNumberParser) as {
    [bridge: string]: { [from: string]: { [to: string]: BigInt } };
  };
  const parsedRemappings = parse(remappings) as { [name: string]: string };

  // Convert the chain names into chain ids.
  const reconstructedJson: typeof parsedJson = {};
  for (const bridge of Object.keys(parsedJson)) {
    const selectedBridge = parsedJson[bridge];
    const reconstructedBridge: (typeof parsedJson)[string] = {};
    for (const fromChain of Object.keys(selectedBridge)) {
      const selectedFromChain = selectedBridge[fromChain];
      const reconstructedFromChain: (typeof reconstructedBridge)[string] = {};
      for (const toChain of Object.keys(selectedFromChain)) {
        const translatedToChain = parsedRemappings[toChain];
        if (translatedToChain === undefined)
          throw new Error(`${toChain} not found in remappings`);
        reconstructedFromChain[translatedToChain] = selectedFromChain[toChain];
      }
      const translatedFromChain = parsedRemappings[fromChain];
      if (translatedFromChain === undefined)
        throw new Error(`${fromChain} not found in remappings`);
      reconstructedBridge[translatedFromChain] = reconstructedFromChain;
    }
    reconstructedJson[bridge] = reconstructedBridge;
  }

  const stringifiedJson = JSON.stringify(reconstructedJson, bigIntReplacer, 2);
  let tsContent = `/**
 * @file Automatically generated by catalyst-channel-list.
 */\n
`;
  tsContent += `export const ${variableName} = ${stringifiedJson};`;
  fs.writeFileSync(outputFilePath, tsContent, 'utf8');
}

const configRelativePath = path.join(__dirname, '../config');

// Replace 'input.json' and 'output.ts' with your file paths
convertJsonToTypeScript(
  [
    `${configRelativePath}/chains.json`,
    `${configRelativePath}/chainNameToId.json`,
  ],
  `${configRelativePath}/chainsConfig.ts`,
  'chains',
);

console.log('Converted JSON into object successfully!');
